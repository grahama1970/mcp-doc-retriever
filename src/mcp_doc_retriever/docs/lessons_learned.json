[
  {
    "role": "Planner",
    "task_context": "Initial project setup (Task 1.1), attempting Git actions (add, commit, tag)",
    "problem": "Attempting `git add .`, `git commit`, or `git tag` failed with 'fatal: not a git repository'.",
    "solution": "Ensure `git init` is executed successfully in the project root directory *before* attempting any other Git commands like add, commit, or tag during initial setup phases.",
    "keywords": ["git", "init", "setup", "commit", "tag", "add", "repository", "planner"]
  },
  {
    "role": "Planner",
    "task_context": "Task 1.2/1.4/1.5 - Running commands installed via uv",
    "problem": "Commands installed via `uv sync` (e.g., `uvicorn`) were not found in the PATH when executed directly in the shell, causing 'command not found' errors.",
    "solution": "Use `uv run <command>` to execute commands that rely on packages installed within the `uv` virtual environment. This ensures the command runs within the correct context and can locate the necessary executables.",
    "keywords": ["uv", "run", "sync", "dependencies", "execution", "environment", "path", "command not found", "planner", "uvicorn"]
  },
  {
    "role": "Senior Coder",
    "task_context": "Dependency management, adding/updating/removing packages",
    "problem": "Forgetting to use `uv add` leads to inconsistent environments, missing lock updates, or broken virtualenvs.",
    "solution": "Always use `uv add <package>` (or `uv pip` commands) to add, update, or remove dependencies. Never edit `pyproject.toml` manually or use `pip` directly.",
    "keywords": ["uv", "dependency management", "add", "update", "remove", "pyproject.toml", "lockfile", "best practice", "senior-coder"]
  },
  {
    "role": "Senior Coder",
    "task_context": "Encountering missing dependencies or ModuleNotFoundError during script execution or runtime",
    "problem": "Reporting missing packages as errors instead of proactively fixing them immediately, causing unnecessary delays and user intervention.",
    "solution": "When encountering missing dependencies (e.g., ModuleNotFoundError), immediately attempt to fix by running `uv add <package>` without waiting for user input. Then re-run the failing command or script to verify resolution.",
    "keywords": ["dependency", "ModuleNotFoundError", "uv add", "proactive", "environment repair", "senior-coder", "debugging", "automation"]
  },
  {
    "role": "Hacker",
    "task_context": "Security testing of downloader.py",
    "problem": "Double-encoded path traversal (%252e%252e%252f) bypassed security checks",
    "solution": "Added multiple URL decoding passes to handle nested encoding attempts",
    "keywords": ["security", "path traversal", "encoding", "hacker"]
  },
  {
    "role": "Hacker",
    "task_context": "Security testing of downloader.py",
    "problem": "Concurrent downloads to same file could cause corruption",
    "solution": "Implemented simple file locking mechanism using .lock files",
    "keywords": ["security", "concurrency", "locking", "hacker"]
  },
  {
    "role": "Hacker",
    "task_context": "Security testing of downloader.py (Task 2.4)",
    "problem": "Hidden password fields and obfuscated login forms were not being detected",
    "solution": "Enhanced paywall detection to check for hidden fields, HTML entities, and obfuscated field names",
    "keywords": ["security", "paywall", "login detection", "obfuscation", "hacker"]
  },
  {
    "role": "Hacker",
    "task_context": "Security testing of downloader.py (Task 2.4)",
    "problem": "Error messages could leak internal details about malformed responses",
    "solution": "Standardized generic error messages that don't reveal implementation details",
    "keywords": ["security", "error handling", "information leakage", "hacker"]
  },
  {
    "role": "Senior Coder",
    "task_context": "Implementing concurrency control with asyncio.Semaphore",
    "problem": "Race conditions occurred due to improper management of asyncio.Semaphore, particularly by not using async context managers. Multiple coroutines accessed shared resources concurrently, leading to data inconsistency.",
    "solution": "Refactored code to use async context managers with asyncio.Semaphore to ensure proper acquisition and release of locks. Integrated pytest-asyncio to establish a robust asynchronous testing framework and enforced strict concurrency limits for security purposes. The race condition, exemplified by concurrent file writes, was resolved through these improvements.",
    "keywords": ["asyncio", "semaphore", "async context manager", "pytest-asyncio", "concurrency", "race condition", "security"]
  },
  {
    "role": "Junior Coder",
    "task_context": "Learned during replacement of unreliable tests with a CLI usage example and subsequent security hardening of the downloader module.",
    "problem": "Directly running CLI scripts inside packages can cause import errors. Unsanitized CLI path arguments risk path traversal and arbitrary file writes.",
    "solution": "Instruct users to invoke CLI via `python -m package.module` or `uv run -m package.module` to avoid import issues. Sanitize and resolve CLI path arguments to absolute paths, restricting them within a safe base directory to prevent traversal attacks. Enforce restrictions strictly and provide clear error messages.",
    "keywords": ["cli", "python -m", "uv run", "security", "path traversal", "sanitization", "file paths", "junior-coder"]
  },
  {
    "role": "Planner",
    "task_context": "Task 2.6 (Create Downloader Test Script) & subsequent follow-up.",
    "problem": "Automated tests involving complex mocking (e.g., for network requests, browser automation) became brittle and unreliable, failing frequently despite implementation efforts. This blocked progress on verifying the component.",
    "solution": "When automated tests for a component become overly complex or unreliable due to mocking difficulties, consult with the supervisor/user. Consider pivoting the validation strategy away from complex automated tests towards simpler methods like runnable CLI examples or focused integration tests, even if it deviates from the original task plan. Mark the original test task as complete/partially complete with a note, and create a follow-up task for the new validation approach.",
    "keywords": ["planning", "testing", "mocking", "brittle tests", "validation", "cli example", "adaptation", "task management", "planner", "boomerang mode"]
  },
  {
    "role": "Junior Coder",
    "task_context": "Implementing secure and efficient keyword scanning over local HTML files",
    "problem": "Naive HTML keyword scanning risks inefficiency, errors with encodings, scanning sensitive files, or resource exhaustion.",
    "solution": "When implementing keyword scanning over local HTML files, ensure to: Use robust HTML parsing (e.g., BeautifulSoup) with graceful encoding fallback. Enforce directory restrictions to avoid scanning sensitive files. Impose file size limits to prevent resource exhaustion. Log and skip problematic files rather than failing. Decompose logic into clear, testable components for maintainability. This approach balances speed, accuracy, and security.",
    "keywords": ["html", "parsing", "keyword scanning", "security", "efficiency", "junior-coder"]
  },
  {
    "role": "Hacker",
    "task_context": "Security hardening of downloader and file handling",
    "problem": "User-controlled identifiers such as filenames or IDs can be crafted to perform path traversal or injection attacks if not strictly validated.",
    "solution": "Always strictly validate user-controlled identifiers against safe patterns (e.g., allowlists or strict regex) to prevent path traversal and injection attacks.",
    "keywords": ["security", "validation", "identifiers", "path traversal", "injection", "hacker"]
  },
  {
    "role": "Hacker",
    "task_context": "Security hardening of downloader and file handling",
    "problem": "File paths from untrusted sources, such as index files, may be manipulated to escape allowed directories and access unauthorized files.",
    "solution": "Enforce allowed directory constraints by resolving file paths to their real absolute paths and verifying they remain within the intended base directory using commonpath checks. This prevents unauthorized file access via directory traversal.",
    "keywords": ["security", "directory traversal", "realpath", "commonpath", "file access", "hacker"]
  }
]