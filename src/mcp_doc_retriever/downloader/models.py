# src/mcp_doc_retriever/downloader/models.py
"""
Pydantic models specific to the downloader components.
"""
from pydantic import BaseModel, Field
from typing import List, Optional, Literal, Dict, Any
from datetime import datetime

from mcp_doc_retriever.searcher.helpers import ContentBlock # Import the dependent model
# Import ContentBlock from its new location using a string forward reference
# Pydantic resolves this later.
# from mcp_doc_retriever.searcher.helpers import ContentBlock # This causes circular import if uncommented directly

# --- Pydantic Model Moved from models.py ---

class IndexRecord(BaseModel):
    """
    Internal model for tracking download attempts and results in the index file (.jsonl).
    This is the primary output record generated by the web_downloader.

    Attributes:
        original_url: The URL as initially requested or found.
        canonical_url: The canonical version of the URL after normalization/redirects.
        local_path: Filesystem path where the content was saved (if successful). String for flexibility.
        content_md5: MD5 hash of the downloaded content (if calculated).
        fetch_status: Outcome of the fetch attempt. Includes specific failure reasons.
        http_status: HTTP status code received from the server (if applicable).
        error_message: Description of the error if fetch_status indicates failure.
        content_blocks: List of extracted content blocks (code, json, text) found on the page.
        code_snippets: Deprecated field for backward compatibility, prefer content_blocks.
    """

    original_url: str
    canonical_url: str
    local_path: str  # Store as string, Path object might not serialize well directly to JSONL
    content_md5: Optional[str] = None
    fetch_status: Literal[
        "success",
        "failed_request",
        "failed_robotstxt",
        "failed_paywall",
        "failed_internal",
        "failed_precheck",
        "failed_ssrf",
        "failed_setup",
        "skipped",
        "skipped_domain",
        "failed_generic",  # Added more specific statuses
    ]
    http_status: Optional[int] = None
    error_message: Optional[str] = None
    # Use simple forward reference string for ContentBlock
    content_blocks: Optional[List['ContentBlock']] = None
    code_snippets: Optional[list[dict]] = Field(None, description="Deprecated, use content_blocks")

# --- End Pydantic Model Moved from models.py ---

# Add a simple __main__ block for basic validation if needed
if __name__ == "__main__":
    # Example instantiation (optional, for basic check)
    # Need to import ContentBlock here for the test
    from mcp_doc_retriever.searcher.helpers import ContentBlock
    try:
        cb = ContentBlock(type="text", content="test")
        record = IndexRecord(
            original_url="http://example.com",
            canonical_url="http://example.com",
            local_path="path/to/file.html",
            fetch_status="success",
            content_blocks=[cb]
        )
        print("IndexRecord created successfully (basic check).")
        print(record.model_dump_json(exclude_none=True))
    except Exception as e:
        print(f"Error creating IndexRecord: {e}")

# Explicitly rebuild the model after all definitions to resolve forward references
IndexRecord.model_rebuild()